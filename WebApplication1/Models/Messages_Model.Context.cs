//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CRUD_SampleEntities : DbContext
    {
        public CRUD_SampleEntities()
            : base("name=CRUD_SampleEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Messages> Messages { get; set; }
    
        public virtual ObjectResult<Nullable<int>> Delete_Messages(Nullable<long> messageID)
        {
            var messageIDParameter = messageID.HasValue ?
                new ObjectParameter("MessageID", messageID) :
                new ObjectParameter("MessageID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Delete_Messages", messageIDParameter);
        }
    
        public virtual ObjectResult<Get_Messages_Result> Get_Messages(Nullable<int> count)
        {
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Messages_Result>("Get_Messages", countParameter);
        }
    
        public virtual ObjectResult<Get_MessagesbyID_Result> Get_MessagesbyID(Nullable<long> messageID)
        {
            var messageIDParameter = messageID.HasValue ?
                new ObjectParameter("MessageID", messageID) :
                new ObjectParameter("MessageID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_MessagesbyID_Result>("Get_MessagesbyID", messageIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Set_Messages(string message, string emptyMessage, Nullable<System.DateTime> date)
        {
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var emptyMessageParameter = emptyMessage != null ?
                new ObjectParameter("EmptyMessage", emptyMessage) :
                new ObjectParameter("EmptyMessage", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Set_Messages", messageParameter, emptyMessageParameter, dateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Update_Messages(Nullable<long> messageID, string message, string emptyMessage, Nullable<System.DateTime> date)
        {
            var messageIDParameter = messageID.HasValue ?
                new ObjectParameter("MessageID", messageID) :
                new ObjectParameter("MessageID", typeof(long));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var emptyMessageParameter = emptyMessage != null ?
                new ObjectParameter("EmptyMessage", emptyMessage) :
                new ObjectParameter("EmptyMessage", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Update_Messages", messageIDParameter, messageParameter, emptyMessageParameter, dateParameter);
        }
    }
}
